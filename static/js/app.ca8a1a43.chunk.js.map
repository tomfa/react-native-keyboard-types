{"version":3,"sources":["Keyboard.tsx","App.tsx","hooks.ts","index.js","web-build/register-service-worker.js"],"names":["KeyboardType","iOSKeyboards","asciiCapable","numbersAndPunctuation","url","namePhonePad","twitter","webSearch","AndroidKeyboards","visiblePassword","DisclaimerText","type","includes","Text","style","styles","disclaimer","StyleSheet","create","label","fontWeight","marginBottom","input","backgroundColor","padding","KeyBoard","myRef","autoFocus","onSubmitEditing","TextInput","ref","placeholder","keyboardType","container","minHeight","header","fontSize","App","refs","useRef","useState","currentFocus","focus","useCallback","key","current","blur","setRef","name","useInputFocus","keyBoardProps","useMemo","Object","values","reverse","reduce","acc","props","nextType","length","undefined","push","View","map","registerRootComponent","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console"],"mappings":"iGAGYA,E,kEAAAA,K,kBAAAA,E,6BAAAA,E,kBAAAA,E,qBAAAA,E,uBAAAA,E,yBAAAA,E,6BAAAA,E,gDAAAA,E,UAAAA,E,8BAAAA,E,kBAAAA,E,uBAAAA,E,oCAAAA,M,KAkBZ,IAAMC,EAAe,CACnBD,EAAaE,aACbF,EAAaG,sBACbH,EAAaI,IACbJ,EAAaK,aACbL,EAAaM,QACbN,EAAaO,WAGTC,EAAmB,CAACR,EAAaS,iBASjCC,EAAiB,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,KACxB,OAAIV,EAAaW,SAASD,GACjB,kBAACE,EAAA,EAAD,CAAMC,MAAOC,EAAOC,YAApB,cAELR,EAAiBI,SAASD,GACrB,kBAACE,EAAA,EAAD,CAAMC,MAAOC,EAAOC,YAApB,kBAEF,MAyBHD,EAASE,IAAWC,OAAO,CAC/BC,MAAO,CAAEC,WAAY,OAAQC,aAAc,IAC3CL,WAAY,CAAEI,WAAY,UAC1BE,MAAO,CAAEC,gBAAiB,QAASC,QAAS,EAAGH,aAAc,MAGhDI,EA5BE,SAAC,GAAD,IACfd,EADe,EACfA,KACAe,EAFe,EAEfA,MACAC,EAHe,EAGfA,UACAC,EAJe,EAIfA,gBAJe,OAMf,oCACE,kBAACf,EAAA,EAAD,CAAMC,MAAOC,EAAOI,OACjBR,EAAM,IACP,kBAAC,EAAD,CAAgBA,KAAMA,KAExB,kBAACkB,EAAA,EAAD,CACEf,MAAOC,EAAOO,MACdQ,IAAKJ,EACLK,YAAapB,EACbqB,aAAcrB,EACdgB,UAAWA,EACXC,gBAAiBA,M,iBClBjBb,EAASE,IAAWC,OAAO,CAC/Be,UAAW,CAAEV,gBAAiB,UAAWC,QAAS,GAAIU,UAAW,QACjEC,OAAQ,CAAEC,SAAU,GAAIf,aAAc,MAIzBgB,EA1CH,WAAO,IAAD,ECTW,WAC3B,IAAMC,EAAOC,iBAAqC,IADjB,EAEOC,mBAAiB,IAFxB,WAE1BC,EAF0B,UAiBjC,MAAO,CAAEC,MAdKC,uBACZ,SAACC,GACKN,EAAKO,QAAQJ,IACfH,EAAKO,QAAQJ,GAAcK,OAEzBR,EAAKO,QAAQD,IACfN,EAAKO,QAAQD,GAAKF,UAGtB,CAACD,IAKaM,OAHD,SAACC,GAAD,OAAkB,SAAC1B,GAChCgB,EAAKO,QAAQG,GAAQ1B,KDLG2B,GAAlBP,EADQ,EACRA,MAAOK,EADC,EACDA,OAETG,EAAyCC,mBAAQ,WAErD,OAD8CC,OAAOC,OAAOrD,GAEzDsD,UACAC,QAAO,SAACC,EAA8B7C,GACrC,IACM8C,EAA0B,CAC9B9C,OACA+C,SAHeF,EAAIG,OAAS,EAAIH,EAAIA,EAAIG,OAAS,GAAGhD,UAAOiD,EAI3DjC,UAAW6B,EAAIG,SAAWP,OAAOC,OAAOrD,GAAc2D,OAAS,GAGjE,OADAH,EAAIK,KAAKJ,GACFD,IACN,IACFF,YACF,IAEH,OACE,kBAACQ,EAAA,EAAD,CAAMhD,MAAOC,EAAOkB,WAClB,kBAACpB,EAAA,EAAD,CAAMC,MAAOC,EAAOoB,QAApB,kCACCe,EAAca,KAAI,gBAAGpD,EAAH,EAAGA,KAAM+C,EAAT,EAASA,SAAU/B,EAAnB,EAAmBA,UAAnB,OACjB,kBAAC,EAAD,CACEiB,IAAKjC,EACLA,KAAMA,EACNe,MAAOqB,EAAOpC,GACdiB,gBAAiB,mBAAQ8B,GAAYhB,EAAMgB,IAC3C/B,UAAWA,SElCrBqC,YAAsB3B,I,4DCLlB,kBAAmB4B,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,mDAAoD,CAAEC,MAAO,+BACtEC,MAAK,SAAUC,OAGfC,OAAM,SAAUC,GACfC,QAAQH,KAAK,oCAAqCE,W","file":"static/js/app.ca8a1a43.chunk.js","sourcesContent":["import React from 'react';\nimport { TextInput, Text, StyleSheet } from 'react-native';\n\nexport enum KeyboardType {\n  default = 'default',\n  emailAddress = 'email-address',\n  numeric = 'numeric',\n  phonePad = 'phone-pad',\n  numberPad = 'number-pad',\n  decimalPad = 'decimal-pad',\n  // iOS only\n  asciiCapable = 'ascii-capable',\n  numbersAndPunctuation = 'numbers-and-punctuation',\n  url = 'url',\n  namePhonePad = 'name-phone-pad',\n  twitter = 'twitter',\n  webSearch = 'web-search',\n  // Android only\n  visiblePassword = 'visible-password',\n}\n\nconst iOSKeyboards = [\n  KeyboardType.asciiCapable,\n  KeyboardType.numbersAndPunctuation,\n  KeyboardType.url,\n  KeyboardType.namePhonePad,\n  KeyboardType.twitter,\n  KeyboardType.webSearch,\n];\n\nconst AndroidKeyboards = [KeyboardType.visiblePassword];\n\ninterface KeyBoardProps {\n  type: KeyboardType;\n  myRef?: (input: TextInput) => any;\n  autoFocus: boolean;\n  onSubmitEditing: () => any;\n}\n\nconst DisclaimerText = ({ type }: { type: KeyboardType }) => {\n  if (iOSKeyboards.includes(type)) {\n    return <Text style={styles.disclaimer}>- iOS only</Text>;\n  }\n  if (AndroidKeyboards.includes(type)) {\n    return <Text style={styles.disclaimer}>- Android only</Text>;\n  }\n  return null\n};\n\nconst KeyBoard = ({\n  type,\n  myRef,\n  autoFocus,\n  onSubmitEditing,\n}: KeyBoardProps) => (\n  <>\n    <Text style={styles.label}>\n      {type}{' '}\n      <DisclaimerText type={type} />\n    </Text>\n    <TextInput\n      style={styles.input}\n      ref={myRef}\n      placeholder={type}\n      keyboardType={type}\n      autoFocus={autoFocus}\n      onSubmitEditing={onSubmitEditing}\n    />\n  </>\n);\n\nconst styles = StyleSheet.create({\n  label: { fontWeight: 'bold', marginBottom: 10 },\n  disclaimer: { fontWeight: 'normal' },\n  input: { backgroundColor: 'white', padding: 8, marginBottom: 20 },\n});\n\nexport default KeyBoard;\n","import React, { useMemo } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport KeyBoard, { KeyboardType } from './Keyboard';\nimport { useInputFocus } from \"./hooks\";\n\ninterface KeyBoardPropType {\n  type: KeyboardType;\n  nextType?: KeyboardType;\n  autoFocus: boolean;\n}\n\nconst App = () => {\n  const { focus, setRef } = useInputFocus();\n\n  const keyBoardProps: Array<KeyBoardPropType> = useMemo(() => {\n    const allKeyboardTypes: Array<KeyboardType> = Object.values(KeyboardType);\n    return allKeyboardTypes\n      .reverse()\n      .reduce((acc: Array<KeyBoardPropType>, type) => {\n        const nextType = acc.length > 0 ? acc[acc.length - 1].type : undefined;\n        const props: KeyBoardPropType = {\n          type,\n          nextType,\n          autoFocus: acc.length === Object.values(KeyboardType).length - 1,\n        };\n        acc.push(props);\n        return acc;\n      }, [])\n      .reverse();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.header}>React Native keyboardType demo</Text>\n      {keyBoardProps.map(({ type, nextType, autoFocus }) => (\n        <KeyBoard\n          key={type}\n          type={type}\n          myRef={setRef(type)}\n          onSubmitEditing={() => !!nextType && focus(nextType)}\n          autoFocus={autoFocus}\n        />\n      ))}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { backgroundColor: 'hotpink', padding: 10, minHeight: '100%' },\n  header: { fontSize: 32, marginBottom: 20 }\n});\n\n\nexport default App;\n","import { useCallback, useRef, useState } from \"react\";\nimport { TextInput } from \"react-native\";\n\nexport const useInputFocus = () => {\n  const refs = useRef<{ [key: string]: TextInput }>({});\n  const [currentFocus, setCurrentFocus] = useState<string>(\"\");\n  const focus = useCallback(\n    (key: string) => {\n      if (refs.current[currentFocus]) {\n        refs.current[currentFocus].blur();\n      }\n      if (refs.current[key]) {\n        refs.current[key].focus();\n      }\n    },\n    [currentFocus]\n  );\n  const setRef = (name: string) => (input: TextInput) => {\n    refs.current[name] = input;\n  };\n  return { focus, setRef };\n};\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/react-native-input-focus/expo-service-worker.js', { scope: '/react-native-input-focus/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}